---
# Work in progress, do not use!

# Collective work by Thomas Widhalm & Patrick Dolinic

#- name: Password Generation - Check if the Password File exists
#  stat:
#    path: /usr/share/elasticsearch/generated_passwords
#  register: stat_password
#
##- debug: var=stat_password
#
#- name: Grep for Password in File
#  shell:
#    cmd: 'grep "elasticsearch_bootstrap_pw" /usr/share/elasticsearch/generated_passwords | cut -d: -f2'
#  register: pw_generated_elasticsearch_bootstrap_pw
#  when: stat_password.stat.exists
#
#- set_fact:
#    elasticsearch_bootstrap_pw = {{ pw_generated_elasticsearch_bootstrap_pw.stdout }}
#  when: pw_generated_elasticsearch_bootstrap_pw is defined
#
#- name: elasticsearch_bootstrap_pw genpw
#  shell:
#    cmd: cat /proc/sys/kernel/random/uuid | sed 's/[-]//g' | head -c 20; echo;
#  register: register_elasticsearch_bootstrap_pw
#  when: elasticsearch_bootstrap_pw is undefined
#
#- set_fact:
#    elasticsearch_bootstrap_pw = {{ register_elasticsearch_bootstrap_pw.stdout }}
#  when: register_elasticsearch_bootstrap_pw is defined
#
#- name: Password Generation - Check if the Password File exists
#  file:
#    path: /usr/share/elasticsearch/generated_passwords
#    state: file
#  when: not stat_password.stat.exists
#
#- name: Password Generation - Create the Password File
#  lineinfile:
#    path: /usr/share/elasticsearch/generated_passwords
#    line: 'elastic_boostrap_pw:{{elasticsearch_bootstrap_pw}}'
#    regexp: '^elastic_booststrap_pw'
#    state: present
#    backup: yes
#
##- debug: var=register_elasticsearch_bootstrap_pw
##- fail: 

# Sharing Shell Version Idea
- name: Generate bootstrap password
  shell: |
    # Check if the generated_passwords file exists.
    if [ -f "/usr/share/elasticsearch/generated_passwords" ]; then
      # If it exists, retrieve the password from the file.
      password=$(grep "elasticsearch_bootstrap_pw" /usr/share/elasticsearch/generated_passwords | cut -d: -f2)
    else
      # If it doesn't exist, generate a new password:

      # Generate 3 random digits between 0-9.
      digits=$(shuf -i 0-9 -n 3 | tr -d '\n')
      # Generate 3 random special characters from the provided set.
      chars=$(echo -n '@!#$%^&*()?+' | fold -w 1 | shuf | head -n 3 | tr -d '\n')
      # Generate 3 random letters for capitalization.
      letters=$(echo {a..z} | tr ' ' '\n' | shuf -n 3 | tr -d '\n')
      # Generate a UUID, process it, and make the desired character replacements.
      password=$(cat /proc/sys/kernel/random/uuid | tr -d '-' | head -c 25)
      for i in {0..2}; do
        digit=${digits:$i:1} 
        char=${chars:$i:1}
        password=$(echo "$password" | sed "s/${digit}/${char}/g")
      done
      for i in {0..2}; do
        letter=${letters:$i:1}
        password=$(echo "$password" | sed "s/${letter}/$(echo ${letter} | tr 'a-z' 'A-Z')/g")
      done

      # Store the generated password in the generated_passwords file.
      echo "elasticsearch_bootstrap_pw:$password" > /usr/share/elasticsearch/generated_passwords
    fi
    # Print the password to stdout, so it can be captured by the Ansible register command.
    echo $password
  register: result

- set_fact:
    # Set the generated or retrieved password as an Ansible fact.
    elasticsearch_bootstrap_pw: "{{ result.stdout }}"

